{
    "sourceFile": "frontend/pages/api/register.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1622129711217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1622129725243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,111 +68,109 @@\n             });\n \n \n \n-    } catch (error) {\n-        console.log(error);\n+\n     }\n-}\n \n-if (isMentor) {\n-    console.log(\"Mentor\");\n-    try {\n-        const graphqlQuery = {\n-            query: `mutation register($email: String! , $username: String!, $password: String!) {\n+    if (isMentor) {\n+        console.log(\"Mentor\");\n+        try {\n+            const graphqlQuery = {\n+                query: `mutation register($email: String! , $username: String!, $password: String!) {\n                             register(input: {email: $email, username: $username , password: $password}) {\n                                 user {id,username,email},jwt\n                             }\n                         }\n                           `,\n-            variables: {\n-                email: Email,\n-                password: Password,\n-                username: Username,\n+                variables: {\n+                    email: Email,\n+                    password: Password,\n+                    username: Username,\n+                }\n             }\n-        }\n-        const postUser = await fetch(`${API_URL}/graphql`, {\n-            method: 'POST',\n-            headers: {\n-                'Content-Type': 'application/json'\n-            },\n-            body: JSON.stringify(graphqlQuery),\n-        })\n-        // End Section Create User\n-        const postUserData = await postUser.json()\n-        console.log(postUserData);\n+            const postUser = await fetch(`${API_URL}/graphql`, {\n+                method: 'POST',\n+                headers: {\n+                    'Content-Type': 'application/json'\n+                },\n+                body: JSON.stringify(graphqlQuery),\n+            })\n+            // End Section Create User\n+            const postUserData = await postUser.json()\n+            console.log(postUserData);\n \n \n-        // Get User Id After Sign In \n-        const getUserID = await fetch(`${API_URL}/auth/local`, {\n-            method: 'POST',\n-            headers: {\n-                'Content-Type': 'application/json',\n-            },\n-            body: JSON.stringify({\n-                identifier: Username,\n-                password: Password,\n-            }),\n-        })\n-        const idUser = await getUserID.json()\n-        console.log(Username, Password);\n-        console.log(idUser.user.id);\n+            // Get User Id After Sign In \n+            const getUserID = await fetch(`${API_URL}/auth/local`, {\n+                method: 'POST',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                },\n+                body: JSON.stringify({\n+                    identifier: Username,\n+                    password: Password,\n+                }),\n+            })\n+            const idUser = await getUserID.json()\n+            console.log(Username, Password);\n+            console.log(idUser.user.id);\n \n \n-        axios\n-            .post('http://localhost:1337/mentors', {\n+            axios\n+                .post('http://localhost:1337/mentors', {\n \n-                fullname: FullName,\n-                experise: Experise,\n-                aboutMentor: AboutMentor,\n-                service: Service,\n-                image: Pic,\n-                users_permissions_user: {\n-                    id: idUser.user.id\n-                }\n+                    fullname: FullName,\n+                    experise: Experise,\n+                    aboutMentor: AboutMentor,\n+                    service: Service,\n+                    image: Pic,\n+                    users_permissions_user: {\n+                        id: idUser.user.id\n+                    }\n \n-            })\n-            .then(response => {\n-                console.log(response);\n-            });\n+                })\n+                .then(response => {\n+                    console.log(response);\n+                });\n \n \n-    } catch (error) {\n-        console.log(error);\n+        } catch (error) {\n+            console.log(error);\n+        }\n+\n     }\n+    if (!isMentor && !isStudent) {\n+        console.log(FullName);\n+        try {\n \n-}\n-if (!isMentor && !isStudent) {\n-    console.log(FullName);\n-    try {\n+            axios\n+                .post('http://localhost:1337/auth/local/register', {\n \n-        axios\n-            .post('http://localhost:1337/auth/local/register', {\n+                    email: Email,\n+                    password: Password,\n+                    username: Username,\n+                    fullname: FullName\n \n-                email: Email,\n-                password: Password,\n-                username: Username,\n-                fullname: FullName\n+                })\n+                .then(response => {\n+                    console.log(response);\n+                });\n \n-            })\n-            .then(response => {\n-                console.log(response);\n-            });\n \n \n-\n-    } catch (error) {\n-        console.log(error);\n+        } catch (error) {\n+            console.log(error);\n+        }\n     }\n-}\n \n \n \n \n \n \n \n-    }\n+}\n \n }\n \n \n"
                },
                {
                    "date": 1622129856777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n export default async (req, res) => {\n     if (req.method === 'POST') {\n \n-        const { FullName, Email, Password, Username, isMentor, Graduation, Degree, Experise, isStudent, Service, AboutMentor, Pic } = req.body\n+        const { FullName, Email, Password, Username, isMentor, Universitym Graduation, Degree, Experise, isStudent, Service, AboutMentor, Pic } = req.body\n         console.log(FullName, Experise, Service, AboutMentor, Pic);\n \n         // Create User in Collection Type { User}\n         if (isStudent) {\n@@ -43,11 +43,10 @@\n                 password: Password,\n             }),\n         })\n         const idUser = await getUserID.json()\n-        console.log(Username, Password);\n-        console.log(idUser.user.id);\n \n+\n         // Create User in Collection Type { Students}\n \n \n         // Start Section Create Students\n@@ -57,8 +56,9 @@\n \n                 fullname: FullName,\n                 degree: Degree,\n                 graduation: Graduation,\n+                univerisry: University,\n                 users_permissions_user: {\n                     id: idUser.user.id\n                 }\n \n@@ -67,110 +67,106 @@\n                 console.log(response);\n             });\n \n \n-\n-\n-    }\n-\n-    if (isMentor) {\n-        console.log(\"Mentor\");\n-        try {\n-            const graphqlQuery = {\n-                query: `mutation register($email: String! , $username: String!, $password: String!) {\n+        if (isMentor) {\n+            console.log(\"Mentor\");\n+            try {\n+                const graphqlQuery = {\n+                    query: `mutation register($email: String! , $username: String!, $password: String!) {\n                             register(input: {email: $email, username: $username , password: $password}) {\n                                 user {id,username,email},jwt\n                             }\n                         }\n                           `,\n-                variables: {\n-                    email: Email,\n-                    password: Password,\n-                    username: Username,\n+                    variables: {\n+                        email: Email,\n+                        password: Password,\n+                        username: Username,\n+                    }\n                 }\n-            }\n-            const postUser = await fetch(`${API_URL}/graphql`, {\n-                method: 'POST',\n-                headers: {\n-                    'Content-Type': 'application/json'\n-                },\n-                body: JSON.stringify(graphqlQuery),\n-            })\n-            // End Section Create User\n-            const postUserData = await postUser.json()\n-            console.log(postUserData);\n+                const postUser = await fetch(`${API_URL}/graphql`, {\n+                    method: 'POST',\n+                    headers: {\n+                        'Content-Type': 'application/json'\n+                    },\n+                    body: JSON.stringify(graphqlQuery),\n+                })\n+                // End Section Create User\n+                const postUserData = await postUser.json()\n+                console.log(postUserData);\n \n \n-            // Get User Id After Sign In \n-            const getUserID = await fetch(`${API_URL}/auth/local`, {\n-                method: 'POST',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                },\n-                body: JSON.stringify({\n-                    identifier: Username,\n-                    password: Password,\n-                }),\n-            })\n-            const idUser = await getUserID.json()\n-            console.log(Username, Password);\n-            console.log(idUser.user.id);\n+                // Get User Id After Sign In \n+                const getUserID = await fetch(`${API_URL}/auth/local`, {\n+                    method: 'POST',\n+                    headers: {\n+                        'Content-Type': 'application/json',\n+                    },\n+                    body: JSON.stringify({\n+                        identifier: Username,\n+                        password: Password,\n+                    }),\n+                })\n+                const idUser = await getUserID.json()\n+                console.log(Username, Password);\n+                console.log(idUser.user.id);\n \n \n-            axios\n-                .post('http://localhost:1337/mentors', {\n+                axios\n+                    .post('http://localhost:1337/mentors', {\n \n-                    fullname: FullName,\n-                    experise: Experise,\n-                    aboutMentor: AboutMentor,\n-                    service: Service,\n-                    image: Pic,\n-                    users_permissions_user: {\n-                        id: idUser.user.id\n-                    }\n+                        fullname: FullName,\n+                        experise: Experise,\n+                        aboutMentor: AboutMentor,\n+                        service: Service,\n+                        image: Pic,\n+                        users_permissions_user: {\n+                            id: idUser.user.id\n+                        }\n \n-                })\n-                .then(response => {\n-                    console.log(response);\n-                });\n+                    })\n+                    .then(response => {\n+                        console.log(response);\n+                    });\n \n \n-        } catch (error) {\n-            console.log(error);\n+            } catch (error) {\n+                console.log(error);\n+            }\n+\n         }\n+        if (!isMentor && !isStudent) {\n+            console.log(FullName);\n+            try {\n \n-    }\n-    if (!isMentor && !isStudent) {\n-        console.log(FullName);\n-        try {\n+                axios\n+                    .post('http://localhost:1337/auth/local/register', {\n \n-            axios\n-                .post('http://localhost:1337/auth/local/register', {\n+                        email: Email,\n+                        password: Password,\n+                        username: Username,\n+                        fullname: FullName\n \n-                    email: Email,\n-                    password: Password,\n-                    username: Username,\n-                    fullname: FullName\n+                    })\n+                    .then(response => {\n+                        console.log(response);\n+                    });\n \n-                })\n-                .then(response => {\n-                    console.log(response);\n-                });\n \n \n-\n-        } catch (error) {\n-            console.log(error);\n+            } catch (error) {\n+                console.log(error);\n+            }\n         }\n-    }\n \n \n \n \n \n \n \n-}\n+    }\n \n }\n \n \n"
                },
                {
                    "date": 1622129902758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n export default async (req, res) => {\n     if (req.method === 'POST') {\n \n-        const { FullName, Email, Password, Username, isMentor, Universitym Graduation, Degree, Experise, isStudent, Service, AboutMentor, Pic } = req.body\n+        const { FullName, Email, Password, Username, isMentor, University, Graduation, Degree, Experise, isStudent, Service, AboutMentor, Pic } = req.body\n         console.log(FullName, Experise, Service, AboutMentor, Pic);\n \n         // Create User in Collection Type { User}\n         if (isStudent) {\n@@ -70,33 +70,22 @@\n \n         if (isMentor) {\n             console.log(\"Mentor\");\n             try {\n-                const graphqlQuery = {\n-                    query: `mutation register($email: String! , $username: String!, $password: String!) {\n-                            register(input: {email: $email, username: $username , password: $password}) {\n-                                user {id,username,email},jwt\n-                            }\n-                        }\n-                          `,\n-                    variables: {\n+                axios\n+                    .post('http://localhost:1337/auth/local/register', {\n+\n                         email: Email,\n                         password: Password,\n                         username: Username,\n-                    }\n-                }\n-                const postUser = await fetch(`${API_URL}/graphql`, {\n-                    method: 'POST',\n-                    headers: {\n-                        'Content-Type': 'application/json'\n-                    },\n-                    body: JSON.stringify(graphqlQuery),\n-                })\n-                // End Section Create User\n-                const postUserData = await postUser.json()\n-                console.log(postUserData);\n+                        fullname: FullName\n \n+                    })\n+                    .then(response => {\n+                        console.log(response);\n+                    });\n \n+\n                 // Get User Id After Sign In \n                 const getUserID = await fetch(`${API_URL}/auth/local`, {\n                     method: 'POST',\n                     headers: {\n"
                },
                {
                    "date": 1622129938251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n \n         if (isMentor) {\n             console.log(\"Mentor\");\n             try {\n+\n                 axios\n                     .post('http://localhost:1337/auth/local/register', {\n \n                         email: Email,\n@@ -84,8 +85,11 @@\n                         console.log(response);\n                     });\n \n \n+                // End Section Create User\n+\n+\n                 // Get User Id After Sign In \n                 const getUserID = await fetch(`${API_URL}/auth/local`, {\n                     method: 'POST',\n                     headers: {\n"
                },
                {
                    "date": 1622129967812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,10 +100,8 @@\n                         password: Password,\n                     }),\n                 })\n                 const idUser = await getUserID.json()\n-                console.log(Username, Password);\n-                console.log(idUser.user.id);\n \n \n                 axios\n                     .post('http://localhost:1337/mentors', {\n"
                },
                {
                    "date": 1622129993201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n export default async (req, res) => {\n     if (req.method === 'POST') {\n \n-        const { FullName, Email, Password, Username, isMentor, University, Graduation, Degree, Experise, isStudent, Service, AboutMentor, Pic } = req.body\n+        const { FullName, Email, Password, Username, isMentor, University, Graduation, Degree, Experise, isStudent, Service, AboutMentor, MentorIMG } = req.body\n         console.log(FullName, Experise, Service, AboutMentor, Pic);\n \n         // Create User in Collection Type { User}\n         if (isStudent) {\n"
                },
                {
                    "date": 1622130025427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n                         fullname: FullName,\n                         experise: Experise,\n                         aboutMentor: AboutMentor,\n                         service: Service,\n-                        image: Pic,\n+                        image: MentorIMG,\n                         users_permissions_user: {\n                             id: idUser.user.id\n                         }\n \n"
                }
            ],
            "date": 1622129711217,
            "name": "Commit-0",
            "content": "import cookie from 'cookie'\nimport { API_URL } from '@/config/index'\nimport axios from 'axios'\n\nexport default async (req, res) => {\n    if (req.method === 'POST') {\n\n        const { FullName, Email, Password, Username, isMentor, Graduation, Degree, Experise, isStudent, Service, AboutMentor, Pic } = req.body\n        console.log(FullName, Experise, Service, AboutMentor, Pic);\n\n        // Create User in Collection Type { User}\n        if (isStudent) {\n\n            try {\n                axios\n                    .post('http://localhost:1337/auth/local/register', {\n\n                        email: Email,\n                        password: Password,\n                        username: Username,\n                        fullname: FullName\n\n                    })\n                    .then(response => {\n                        console.log(response);\n                    });\n\n\n\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        // Get User Id After Sign In \n        const getUserID = await fetch(`${API_URL}/auth/local`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                identifier: Username,\n                password: Password,\n            }),\n        })\n        const idUser = await getUserID.json()\n        console.log(Username, Password);\n        console.log(idUser.user.id);\n\n        // Create User in Collection Type { Students}\n\n\n        // Start Section Create Students\n\n        axios\n            .post('http://localhost:1337/students', {\n\n                fullname: FullName,\n                degree: Degree,\n                graduation: Graduation,\n                users_permissions_user: {\n                    id: idUser.user.id\n                }\n\n            })\n            .then(response => {\n                console.log(response);\n            });\n\n\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nif (isMentor) {\n    console.log(\"Mentor\");\n    try {\n        const graphqlQuery = {\n            query: `mutation register($email: String! , $username: String!, $password: String!) {\n                            register(input: {email: $email, username: $username , password: $password}) {\n                                user {id,username,email},jwt\n                            }\n                        }\n                          `,\n            variables: {\n                email: Email,\n                password: Password,\n                username: Username,\n            }\n        }\n        const postUser = await fetch(`${API_URL}/graphql`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery),\n        })\n        // End Section Create User\n        const postUserData = await postUser.json()\n        console.log(postUserData);\n\n\n        // Get User Id After Sign In \n        const getUserID = await fetch(`${API_URL}/auth/local`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                identifier: Username,\n                password: Password,\n            }),\n        })\n        const idUser = await getUserID.json()\n        console.log(Username, Password);\n        console.log(idUser.user.id);\n\n\n        axios\n            .post('http://localhost:1337/mentors', {\n\n                fullname: FullName,\n                experise: Experise,\n                aboutMentor: AboutMentor,\n                service: Service,\n                image: Pic,\n                users_permissions_user: {\n                    id: idUser.user.id\n                }\n\n            })\n            .then(response => {\n                console.log(response);\n            });\n\n\n    } catch (error) {\n        console.log(error);\n    }\n\n}\nif (!isMentor && !isStudent) {\n    console.log(FullName);\n    try {\n\n        axios\n            .post('http://localhost:1337/auth/local/register', {\n\n                email: Email,\n                password: Password,\n                username: Username,\n                fullname: FullName\n\n            })\n            .then(response => {\n                console.log(response);\n            });\n\n\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n\n\n\n\n\n    }\n\n}\n\n\n"
        }
    ]
}